// Code generated by MockGen. DO NOT EDIT.
// Source: geotrack_api/internal/app/controller (interfaces: CheckData)
//
// Generated by this command:
//
//	mockgen -package=mocks geotrack_api/internal/app/controller CheckData
//

// Package mocks is a generated GoMock package.
package mocks

import (
	customerrors "geotrack_api/config/customerrors"
	model "geotrack_api/model"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockCheckData is a mock of CheckData interface.
type MockCheckData struct {
	ctrl     *gomock.Controller
	recorder *MockCheckDataMockRecorder
	isgomock struct{}
}

// MockCheckDataMockRecorder is the mock recorder for MockCheckData.
type MockCheckDataMockRecorder struct {
	mock *MockCheckData
}

// NewMockCheckData creates a new mock instance.
func NewMockCheckData(ctrl *gomock.Controller) *MockCheckData {
	mock := &MockCheckData{ctrl: ctrl}
	mock.recorder = &MockCheckDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckData) EXPECT() *MockCheckDataMockRecorder {
	return m.recorder
}

// CheckInputData mocks base method.
func (m *MockCheckData) CheckInputData(input string, c *gin.Context) (*model.GivenData, *customerrors.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckInputData", input, c)
	ret0, _ := ret[0].(*model.GivenData)
	ret1, _ := ret[1].(*customerrors.CustomError)
	return ret0, ret1
}

// CheckInputData indicates an expected call of CheckInputData.
func (mr *MockCheckDataMockRecorder) CheckInputData(input, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckInputData", reflect.TypeOf((*MockCheckData)(nil).CheckInputData), input, c)
}

// ValidateCountry mocks base method.
func (m *MockCheckData) ValidateCountry(country string) *customerrors.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateCountry", country)
	ret0, _ := ret[0].(*customerrors.CustomError)
	return ret0
}

// ValidateCountry indicates an expected call of ValidateCountry.
func (mr *MockCheckDataMockRecorder) ValidateCountry(country any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateCountry", reflect.TypeOf((*MockCheckData)(nil).ValidateCountry), country)
}

// ValidateIp mocks base method.
func (m *MockCheckData) ValidateIp(ip string) *customerrors.CustomError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValidateIp", ip)
	ret0, _ := ret[0].(*customerrors.CustomError)
	return ret0
}

// ValidateIp indicates an expected call of ValidateIp.
func (mr *MockCheckDataMockRecorder) ValidateIp(ip any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValidateIp", reflect.TypeOf((*MockCheckData)(nil).ValidateIp), ip)
}
