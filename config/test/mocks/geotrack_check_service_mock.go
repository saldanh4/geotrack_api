// Code generated by MockGen. DO NOT EDIT.
// Source: geotrack_api/internal/app/controller (interfaces: CheckService)
//
// Generated by this command:
//
//	mockgen -package=mocks geotrack_api/internal/app/controller CheckService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	customerrors "geotrack_api/config/customerrors"
	model "geotrack_api/model"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockCheckService is a mock of CheckService interface.
type MockCheckService struct {
	ctrl     *gomock.Controller
	recorder *MockCheckServiceMockRecorder
	isgomock struct{}
}

// MockCheckServiceMockRecorder is the mock recorder for MockCheckService.
type MockCheckServiceMockRecorder struct {
	mock *MockCheckService
}

// NewMockCheckService creates a new mock instance.
func NewMockCheckService(ctrl *gomock.Controller) *MockCheckService {
	mock := &MockCheckService{ctrl: ctrl}
	mock.recorder = &MockCheckServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckService) EXPECT() *MockCheckServiceMockRecorder {
	return m.recorder
}

// CheckEntryData mocks base method.
func (m *MockCheckService) CheckEntryData(input string, c *gin.Context) (*model.GivenData, *customerrors.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckEntryData", input, c)
	ret0, _ := ret[0].(*model.GivenData)
	ret1, _ := ret[1].(*customerrors.CustomError)
	return ret0, ret1
}

// CheckEntryData indicates an expected call of CheckEntryData.
func (mr *MockCheckServiceMockRecorder) CheckEntryData(input, c any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckEntryData", reflect.TypeOf((*MockCheckService)(nil).CheckEntryData), input, c)
}
