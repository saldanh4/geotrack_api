// Code generated by MockGen. DO NOT EDIT.
// Source: geotrack_api/internal/app/usecase (interfaces: GeotrackUsecase)
//
// Generated by this command:
//
//	mockgen -package=mocks geotrack_api/internal/app/usecase GeotrackUsecase
//

// Package mocks is a generated GoMock package.
package mocks

import (
	customerrors "geotrack_api/config/customerrors"
	model "geotrack_api/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockGeotrackUsecase is a mock of GeotrackUsecase interface.
type MockGeotrackUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockGeotrackUsecaseMockRecorder
	isgomock struct{}
}

// MockGeotrackUsecaseMockRecorder is the mock recorder for MockGeotrackUsecase.
type MockGeotrackUsecaseMockRecorder struct {
	mock *MockGeotrackUsecase
}

// NewMockGeotrackUsecase creates a new mock instance.
func NewMockGeotrackUsecase(ctrl *gomock.Controller) *MockGeotrackUsecase {
	mock := &MockGeotrackUsecase{ctrl: ctrl}
	mock.recorder = &MockGeotrackUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGeotrackUsecase) EXPECT() *MockGeotrackUsecaseMockRecorder {
	return m.recorder
}

// CreateIP mocks base method.
func (m *MockGeotrackUsecase) CreateIP(givenIp *model.GivenData) (*model.GeoLocationData, *customerrors.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateIP", givenIp)
	ret0, _ := ret[0].(*model.GeoLocationData)
	ret1, _ := ret[1].(*customerrors.CustomError)
	return ret0, ret1
}

// CreateIP indicates an expected call of CreateIP.
func (mr *MockGeotrackUsecaseMockRecorder) CreateIP(givenIp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateIP", reflect.TypeOf((*MockGeotrackUsecase)(nil).CreateIP), givenIp)
}

// DeleteEntriesByIpUsecase mocks base method.
func (m *MockGeotrackUsecase) DeleteEntriesByIpUsecase(givenIp string) (string, *customerrors.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntriesByIpUsecase", givenIp)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*customerrors.CustomError)
	return ret0, ret1
}

// DeleteEntriesByIpUsecase indicates an expected call of DeleteEntriesByIpUsecase.
func (mr *MockGeotrackUsecaseMockRecorder) DeleteEntriesByIpUsecase(givenIp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntriesByIpUsecase", reflect.TypeOf((*MockGeotrackUsecase)(nil).DeleteEntriesByIpUsecase), givenIp)
}

// GetEntriesByCountryUsecase mocks base method.
func (m *MockGeotrackUsecase) GetEntriesByCountryUsecase(givenCountry string) (*[]model.GeoLocationData, *customerrors.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesByCountryUsecase", givenCountry)
	ret0, _ := ret[0].(*[]model.GeoLocationData)
	ret1, _ := ret[1].(*customerrors.CustomError)
	return ret0, ret1
}

// GetEntriesByCountryUsecase indicates an expected call of GetEntriesByCountryUsecase.
func (mr *MockGeotrackUsecaseMockRecorder) GetEntriesByCountryUsecase(givenCountry any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesByCountryUsecase", reflect.TypeOf((*MockGeotrackUsecase)(nil).GetEntriesByCountryUsecase), givenCountry)
}

// GetEntriesByIpUsecase mocks base method.
func (m *MockGeotrackUsecase) GetEntriesByIpUsecase(givenIp string) (*model.GeoLocationData, *customerrors.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEntriesByIpUsecase", givenIp)
	ret0, _ := ret[0].(*model.GeoLocationData)
	ret1, _ := ret[1].(*customerrors.CustomError)
	return ret0, ret1
}

// GetEntriesByIpUsecase indicates an expected call of GetEntriesByIpUsecase.
func (mr *MockGeotrackUsecaseMockRecorder) GetEntriesByIpUsecase(givenIp any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEntriesByIpUsecase", reflect.TypeOf((*MockGeotrackUsecase)(nil).GetEntriesByIpUsecase), givenIp)
}

// GetNearestIpToSeSquareUsecase mocks base method.
func (m *MockGeotrackUsecase) GetNearestIpToSeSquareUsecase() (*model.GeoLocationData, *customerrors.CustomError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearestIpToSeSquareUsecase")
	ret0, _ := ret[0].(*model.GeoLocationData)
	ret1, _ := ret[1].(*customerrors.CustomError)
	return ret0, ret1
}

// GetNearestIpToSeSquareUsecase indicates an expected call of GetNearestIpToSeSquareUsecase.
func (mr *MockGeotrackUsecaseMockRecorder) GetNearestIpToSeSquareUsecase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearestIpToSeSquareUsecase", reflect.TypeOf((*MockGeotrackUsecase)(nil).GetNearestIpToSeSquareUsecase))
}
